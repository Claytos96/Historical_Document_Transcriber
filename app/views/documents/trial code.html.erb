<div id="pdf-container"></div>
<script>
function initPDF() {
    const pdfContainer = document.getElementById('pdf-container');
    if (!pdfContainer) return; // Exit if the container is not found

    let pdfDoc = null;
    let scale = 1.0; // Default zoom level
    let isDragging = false;
    let startX, startY, scrollLeft, scrollTop;

    const url = '<%= url_for(@document.file) %>'; // URL for the PDF
    const pdfjsLib = window['pdfjs-dist/build/pdf'];
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.worker.min.js';

    // Clear previous content
    pdfContainer.innerHTML = ''; // Clear the container before loading new PDF

    loadPDF(url); // Call loadPDF on initialization

    // Load PDF Document
    function loadPDF(url) {
        const loadingTask = pdfjsLib.getDocument(url);
        loadingTask.promise.then(pdf => {
            pdfDoc = pdf;
            renderAllPages(); // Render all pages after loading
            setTimeout(triggerZoom, 100); // Trigger a zoom after a short delay
        }).catch(error => {
            console.error('Error loading PDF: ', error);
            pdfContainer.innerHTML = 'Failed to load PDF.'; // Show error message if needed
        });
    }

    // Render All Pages
    function renderAllPages() {
        pdfContainer.innerHTML = ''; // Clear previous render
        if (!pdfDoc) return; // Ensure pdfDoc is valid

        for (let pageNum = 1; pageNum <= pdfDoc.numPages; pageNum++) {
            pdfDoc.getPage(pageNum).then(page => {
                const viewport = page.getViewport({ scale });
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                canvas.height = viewport.height;
                canvas.width = viewport.width;
                const renderContext = { canvasContext: context, viewport: viewport };
                page.render(renderContext);
                pdfContainer.appendChild(canvas);
            });
        }
    }

    // Trigger Zoom
    function triggerZoom() {
        scale += 0.01; // Increment scale slightly
        renderAllPages(); // Re-render to reflect changes
    }

    // Mouse Wheel Zooming
    pdfContainer.addEventListener('wheel', (event) => {
        if (event.ctrlKey) {
            event.preventDefault();
            const mouseX = event.clientX - pdfContainer.getBoundingClientRect().left;
            const mouseY = event.clientY - pdfContainer.getBoundingClientRect().top;

            const previousScale = scale;
            scale += event.deltaY < 0 ? 0.1 : -0.1;
            scale = Math.max(scale, 0.2); // Prevent zooming out too far

            const newScale = scale / previousScale;
            pdfContainer.scrollLeft += (mouseX * newScale) - mouseX;
            pdfContainer.scrollTop += (mouseY * newScale) - mouseY;

            renderAllPages(); // Re-render all pages with the new scale
        }
    });

    // Click and Drag Functionality
    pdfContainer.addEventListener('mousedown', (e) => {
        isDragging = true;
        startX = e.pageX - pdfContainer.offsetLeft;
        startY = e.pageY - pdfContainer.offsetTop;
        scrollLeft = pdfContainer.scrollLeft;
        scrollTop = pdfContainer.scrollTop;
    });

    pdfContainer.addEventListener('mouseleave', () => {
        isDragging = false;
    });

    pdfContainer.addEventListener('mouseup', () => {
        isDragging = false;
    });

    pdfContainer.addEventListener('mousemove', (e) => {
        if (!isDragging) return;

        e.preventDefault();
        const x = e.pageX - pdfContainer.offsetLeft;
        const y = e.pageY - pdfContainer.offsetTop;

        const walkX = (x - startX);
        const walkY = (y - startY);

        pdfContainer.scrollLeft = scrollLeft - walkX;
        pdfContainer.scrollTop = scrollTop - walkY;
    });
}

// Initialize PDF on page load
document.addEventListener('turbo:load', initPDF);
</script>
