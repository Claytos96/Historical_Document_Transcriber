<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <script type='text/javascript'>

        // Refresh page automatically one time upon loading
        (() => {
            if (window.localStorage) {

                // If there is no item as 'reload'
                // in localstorage then create one &
                // reload the page
                if (!localStorage.getItem('reload')) {
                    localStorage['reload'] = true;
                    window.location.reload();
                } else {

                    // If there exists a 'reload' item
                    // then clear the 'reload' item in
                    // local storage
                    localStorage.removeItem('reload');
                }
            }
        })(); // Calling anonymous function here only
    </script>
</head>

<div class="head">
  <% if @document %>

    <h1><%= @document.title %></h1>

    <p class="fs-5 description"><%= @document.description %></p>

  <% else %>
    <p>Document not found</p>
  <% end %>
</div>

<div class="show">
  <div class='transcription'>

    <%= simple_form_for [@document], url: document_path(@document), method: :put do |f| %>
      <div class="box">
        <%= f.input :transcription, as: :text, :input_html => { :cols => 70, :rows => 20 } %>
      </div>
      <div class="text-center">
            <%= f.button :submit, "Save", class: 'btn-primary' %>
      </div>
    <% end %>
  </div>

  <div class="container-outer">
    <p class="text-end mb-1">Hold control key to zoom</p>
    <div id="pdf-container"></div>
  </div>
  <script>
    function initPDF() {
        const url = '<%= url_for(@document.file) %>';
        const pdfjsLib = window['pdfjs-dist/build/pdf'];
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.worker.min.js';

        let pdfDoc = null;
        let scale = 1.0; // Start with a default zoom level

        function loadPDF() {
            const loadingTask = pdfjsLib.getDocument(url);
            loadingTask.promise.then(pdf => {
                pdfDoc = pdf;
                renderAllPages(); // Render all pages initially
            }).catch(error => {
                console.error('Error loading PDF: ', error);
            });
        }

        function renderAllPages() {
            const container = document.getElementById('pdf-container');
            container.innerHTML = ''; // Clear the container before rendering

            for (let pageNum = 1; pageNum <= pdfDoc.numPages; pageNum++) {
                pdfDoc.getPage(pageNum).then(page => {
                    const viewport = page.getViewport({ scale });
                    const canvas = document.createElement('canvas');
                    const context = canvas.getContext('2d');
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;

                    const renderContext = {
                        canvasContext: context,
                        viewport: viewport
                    };
                    page.render(renderContext);

                    // Append the canvas to the container
                    container.appendChild(canvas);
                });
            }
        }

        // Mouse wheel zooming with Ctrl key
        const container = document.getElementById('pdf-container');
        container.addEventListener('wheel', (event) => {
            if (event.ctrlKey) {
                event.preventDefault(); // Prevent the default scroll behavior

                const mouseX = event.clientX - container.getBoundingClientRect().left;
                const mouseY = event.clientY - container.getBoundingClientRect().top;

                const previousScale = scale;

                if (event.deltaY < 0) {
                    scale += 0.1; // Zoom in
                } else {
                    scale = Math.max(scale - 0.1, 0.2); // Zoom out
                }

                const newScale = scale / previousScale;

                container.scrollLeft += (mouseX * newScale) - mouseX;
                container.scrollTop += (mouseY * newScale) - mouseY;

                if (pdfDoc) renderAllPages(); // Re-render all pages with the new scale if pdfDoc is loaded
            }
        });

        // Click and Drag Functionality
      container.addEventListener('mousedown', (e) => {
          isDragging = true;
          container.classList.remove('grab');
          container.classList.add('grabbing');
          startX = e.pageX - container.offsetLeft;
          startY = e.pageY - container.offsetTop;
          scrollLeft = container.scrollLeft;
          scrollTop = container.scrollTop;
      });

      container.addEventListener('mouseleave', () => {
          isDragging = false;
          container.classList.remove('grabbing');
          container.classList.add('grab');
      });

      container.addEventListener('mouseup', () => {
          isDragging = false;
          container.classList.remove('grabbing')
          container.classList.add('grab')
      });

      container.addEventListener('mousemove', (e) => {
          if (!isDragging) return;

          e.preventDefault();
          const x = e.pageX - container.offsetLeft;
          const y = e.pageY - container.offsetTop;

          const walkX = (x - startX);
          const walkY = (y - startY);

          container.scrollLeft = scrollLeft - walkX;
          container.scrollTop = scrollTop - walkY;
      });

      container.classList.add('grab')
        // Load the PDF initially
        loadPDF();
    }

    document.addEventListener('turbo:load', initPDF);

  </script>

</div>
