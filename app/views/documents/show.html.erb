<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <script type='text/javascript'>

        // Refresh page automatically one time upon loading
        (() => {
            if (window.localStorage) {

                // If there is no item as 'reload'
                // in localstorage then create one &
                // reload the page
                if (!localStorage.getItem('reload')) {
                    localStorage['reload'] = true;
                    window.location.reload();
                } else {

                    // If there exists a 'reload' item
                    // then clear the 'reload' item in
                    // local storage
                    localStorage.removeItem('reload');
                }
            }
        })(); // Calling anonymous function here only
    </script>
</head>

<div class="head">
  <% if @document %>

    <h1><%= @document.title %></h1>

    <p class="fs-5 description"><%= @document.description %></p>

  <% else %>
    <p>Document not found</p>
  <% end %>
</div>

<div class="show">
  <div class='transcription'>
    <% if @document.locked == false || current_user != @document.user_id %>

      <%= simple_form_for [@document], url: document_path(@document), method: :put do |f| %>
        <div class="box">
          <%= f.input :transcription, as: :text, :input_html => { :cols => 70, :rows => 20 } %>
        </div>
        <div class="text-center">
              <%= f.button :submit, user_signed_in? ? "Save" : "Login to Edit", class: 'btn-primary' %>
        </div>
      <% end %>
    <% else %>
      <p>Transcription</p>
      <textarea class="p-3" rows="18" cols="70" readonly><%= @document.transcription %></textarea>
      <br>
      <br>
      <div class="text-center">
        <div class="badge bg-primary text-wrap text-center">
          <h5>Document owner has locked transcriptions</h5>
        </div>
      </div>
    <% end %>
    <br>
    <br>
    <% if @versions.present? && @versions.last.whodunnit.present? %>
      <p><%= link_to "Last updated by #{User.find(@versions.last.whodunnit).username} at #{@versions.last.created_at}", versions_document_path(@document)%></p>
    <% end %>
  </div>

  <% if @document.files.count > 1 %>
    <div class="file-navigation text-center">
      <button id="prev-file" class="btn btn-secondary">← Previous</button>
      <button id="next-file" class="btn btn-secondary">Next →</button>
    </div>
  <% end %>

  <div class="container-outer">
    <p class="text-end mb-1">Hold control key to zoom</p>
    <div id="pdf-container"></div>
  </div>
  <script>
    function initPDF() {
        let currentFileIndex = 0; // Start with the first file
        const files = <%= raw(@document.files.map { |f| url_for(f) }.to_json) %>; // Array of file URLs
        console.log(files)
        const pdfjsLib = window['pdfjs-dist/build/pdf'];
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.worker.min.js';

        let pdfDoc = null;
        let scale = 1.0; // Start with a default zoom level
        let img;

        // Function to load PDF file
        function loadPDF() {
          const url = files[currentFileIndex]; // Get the current file URL
          const container = document.getElementById('pdf-container');
          container.innerHTML = ''; // Clear the container before rendering
          scale = 1.0;
          const isPDF = url.endsWith('.pdf');
          if (isPDF) {
            const container = document.getElementById('pdf-container');
            const loadingTask = pdfjsLib.getDocument(url);
            loadingTask.promise.then(pdf => {
              pdfDoc = pdf;
              renderAllPages(); // Render all pages initially
            }).catch(error => {
              console.error('Error loading PDF: ', error);
            });
          } else {
            loadImage(url); // Load image if it's not a PDF
          }
        }

        // Function to render all pages of the PDF
        function renderAllPages() {
          const container = document.getElementById('pdf-container');
          container.innerHTML = ''; // Clear the container before rendering

          for (let pageNum = 1; pageNum <= pdfDoc.numPages; pageNum++) {
            pdfDoc.getPage(pageNum).then(page => {
              const viewport = page.getViewport({ scale });
              const canvas = document.createElement('canvas');
              const context = canvas.getContext('2d');
              canvas.height = viewport.height;
              canvas.width = viewport.width;

              const renderContext = {
                canvasContext: context,
                viewport: viewport
              };
              page.render(renderContext);

              // Append the canvas to the container
              container.appendChild(canvas);
            });
          }
        }

        // Function to load image files
        function loadImage(url) {
          const container = document.getElementById('pdf-container');
          img = document.createElement('img');
          img.src = url;
          img.style.maxWidth = '100%'; // Scale the image to fit the container
          img.style.transition = `transform 0.2s`; // Smooth scaling transition
          img.style.transform = `scale(${scale})`; // Apply initial scale
          container.appendChild(img);

          img.onerror = () => {
            console.error('Error loading image: ', url);
          };

          img.onload = () => {
            // Adjust the container size if needed
            container.style.width = `${img.width}px`;
            container.style.height = `${img.height}px`;
          };
        }

        // Function to show the next file
        function showNextFile() {
          if (currentFileIndex < files.length - 1) {
            currentFileIndex++;
            loadPDF(); // Reload the new file
          }
        }

        // Function to show the previous file
        function showPrevFile() {
          if (currentFileIndex > 0) {
            currentFileIndex--;
            loadPDF(); // Reload the previous file
          }
        }

        // Event listeners for navigation buttons
        if (files.length > 1) {
        document.getElementById('next-file').addEventListener('click', showNextFile);
        document.getElementById('prev-file').addEventListener('click', showPrevFile);
        }

        // Mouse wheel zooming with Ctrl key
        const container = document.getElementById('pdf-container');
        container.addEventListener('wheel', (event) => {
            if (event.ctrlKey) {
                event.preventDefault(); // Prevent the default scroll behavior

                const mouseX = event.clientX - container.getBoundingClientRect().left;
                const mouseY = event.clientY - container.getBoundingClientRect().top;

                const previousScale = scale;

                if (event.deltaY < 0) {
                    scale += 0.1; // Zoom in
                } else {
                    scale = Math.max(scale - 0.1, 0.2); // Zoom out
                }

                const newScale = scale / previousScale;

                if (pdfDoc) {
                    container.scrollLeft += (mouseX * newScale) - mouseX;
                    container.scrollTop += (mouseY * newScale) - mouseY;
                  renderAllPages(); // Re-render pages with new scale
                } else if (img) {
                    img.style.transform = `scale(${scale})`; // Update the scale of the image
                    img.style.transformOrigin = `${mouseX}px ${mouseY}px`; // Set zoom origin to mouse position
                }
            }
        });

        // Click and Drag Functionality
      let isDragging = false;
      let startX, startY, scrollLeft, scrollTop

      container.addEventListener('mousedown', (e) => {
          e.preventDefault();

          isDragging = true;
          container.classList.remove('grab');
          container.classList.add('grabbing');
          startX = e.pageX;
          startY = e.pageY;
          scrollLeft = container.scrollLeft;
          scrollTop = container.scrollTop;
      });

      container.addEventListener('mouseleave', () => {
          isDragging = false;
          container.classList.remove('grabbing');
          container.classList.add('grab');
      });

      container.addEventListener('mouseup', () => {
          isDragging = false;
          container.classList.remove('grabbing')
          container.classList.add('grab')
      });

      container.addEventListener('mousemove', (e) => {
          if (!isDragging) return;

          e.preventDefault();
          const x = e.pageX;
          const y = e.pageY;

          const walkX = (x - startX);
          const walkY = (y - startY);

          container.scrollLeft = scrollLeft - walkX;
          container.scrollTop = scrollTop - walkY;
      });

      container.classList.add('grab')
        // Load the PDF initially
        loadPDF();
    }

    document.addEventListener('turbo:load', initPDF);

  </script>

</div>
