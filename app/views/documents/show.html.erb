<% if @document %>

  <h1><%= @document.title %></h1>

  <p><%= @document.description %></p>

<% else %>
  <p>Document not found</p>
<% end %>

<p>Hold control key to zoom</p>
<div id="pdf-container"></div>
     <script>
       function initPDF() {
            const url = '<%= url_for(@document.file) %>';
            const pdfjsLib = window['pdfjs-dist/build/pdf'];
            pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.worker.min.js';

            let pdfDoc = null;
            let scale = 1.0; // Start with a default zoom level

            function loadPDF() {
                const loadingTask = pdfjsLib.getDocument(url);
                loadingTask.promise.then(pdf => {
                    pdfDoc = pdf;
                    renderAllPages(); // Render all pages initially
                }).catch(error => {
                    console.error('Error loading PDF: ', error);
                });
            }

            function renderAllPages() {
                const container = document.getElementById('pdf-container');
                container.innerHTML = ''; // Clear the container before rendering

                // Loop through all pages and render them
                for (let pageNum = 1; pageNum <= pdfDoc.numPages; pageNum++) {
                    pdfDoc.getPage(pageNum).then(page => {
                        const viewport = page.getViewport({ scale });
                        const canvas = document.createElement('canvas');
                        const context = canvas.getContext('2d');
                        canvas.height = viewport.height;
                        canvas.width = viewport.width;

                        const renderContext = {
                            canvasContext: context,
                            viewport: viewport
                        };
                        page.render(renderContext);

                        // Append the canvas to the container
                        container.appendChild(canvas);
                    });
                }
            }

            // Mouse wheel zooming with Ctrl key
            const container = document.getElementById('pdf-container');
            container.addEventListener('wheel', (event) => {
                if (event.ctrlKey) {
                    event.preventDefault(); // Prevent the default scroll behavior

                    // Get mouse position relative to the container
                    const mouseX = event.clientX - container.getBoundingClientRect().left;
                    const mouseY = event.clientY - container.getBoundingClientRect().top;

                    const previousScale = scale;

                    // Adjust scale based on mouse wheel direction
                    if (event.deltaY < 0) {
                        scale += 0.1; // Zoom in
                    } else {
                        scale = Math.max(scale - 0.1, 0.2); // Zoom out
                    }

                    // Calculate new offset based on mouse position
                    const newScale = scale / previousScale;

                    // Adjust scroll position to focus on mouse
                    container.scrollLeft += (mouseX * newScale) - mouseX;
                    container.scrollTop += (mouseY * newScale) - mouseY;

                    if (pdfDoc) renderAllPages(); // Re-render all pages with the new scale if pdfDoc is loaded
                }
            });

            // Load the PDF initially
            loadPDF();
        };

         document.addEventListener('turbo:load', initPDF);
    </script>
