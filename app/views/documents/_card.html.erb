<div class="doc">
  <div class="pic">
    <% if document.file.attached? %>
      <canvas class="preview" id="pdf-canvas-<%= document.id %>"></canvas>
      <img class="preview" id="jpeg-image-<%= document.id %>"/>
    <% end %>
  </div>
  <div class="info">
    <div class="card-head">
      <div class="title">
        <h2><%= document.title %></h2>
      </div>
      <% if controller_name == 'documents' && action_name == 'your_documents' %>
        <div class="popout">
          <button id="gear-button"><i class="bi bi-gear-fill"></i></button>
          <ul class="hidden popout-menu">
            <li class="lock" data-document-id="<%= document.id %>">Prohibit other users from transcribing <span class="tick-icon"><i class="bi bi-check2"></i></span></li>
            <li class="unlock" data-document-id="<%= document.id %>">Allow other user to transcribe <span class="tick-icon"><i class="bi bi-check2"></i></span></li>
          </ul>
        </div>
      <% end %>
    </div>
    <p><%= document.description %></p>
  </div>
</div>

<script>
  document.addEventListener("turbo:load", function() {
    const fileUrl = '<%= url_for(document.file) %>';
    const canvas = document.getElementById('pdf-canvas-<%= document.id %>');
    const img = document.getElementById('jpeg-image-<%= document.id %>');
    const fileExtension = fileUrl.split('.').pop().toLowerCase();
    if (fileExtension === 'pdf') {
      const loadingTask = pdfjsLib.getDocument(fileUrl);
      loadingTask.promise.then(pdf => {
        pdf.getPage(1).then(page => {
          const scale = 1.5;
          const viewport = page.getViewport({ scale: scale });
          const context = canvas.getContext('2d');
          canvas.height = viewport.height;
          canvas.width = viewport.width;

          const renderContext = {
            canvasContext: context,
            viewport: viewport
          };
          page.render(renderContext);
        });
      }).catch(error => {
        console.error('Error loading PDF:', error);
      });
    } else {
      img.src = fileUrl;
      img.style.display = 'block'; // Show image
      canvas.style.display = 'none'; // Hide canvas
    }

     // Add popout menu toggle for all gear buttons
    document.querySelectorAll('.popout button').forEach(gearButton => {
      // Use a unique listener function to avoid duplication
      const toggleMenu = function(event) {
        event.stopPropagation(); // Prevent click from bubbling up
        event.preventDefault();

        // Find the closest popout menu to the clicked button
        const popoutMenu = this.nextElementSibling; // Assuming the popout menu is immediately after the button
        if (popoutMenu) {
          const isHidden = popoutMenu.classList.contains('hidden');
          // Close all menus first
          document.querySelectorAll('.popout-menu').forEach(menu => menu.classList.add('hidden'));
          // Toggle the clicked menu
          if (isHidden) {
            popoutMenu.classList.remove('hidden');
          }
          console.log('Menu hidden:', popoutMenu.classList.contains('hidden')); // Debug log
        }
      };

      // Add the event listener only if it hasn't been added before
      if (!gearButton.dataset.listenerAdded) {
        gearButton.addEventListener('click', toggleMenu);
        gearButton.dataset.listenerAdded = true; // Mark listener as added
      }
    });

    // Close menu if clicking outside
    document.addEventListener('click', function() {
      const popoutMenus = document.querySelectorAll('.popout-menu');
      popoutMenus.forEach(menu => {
        if (!menu.classList.contains('hidden')) {
          menu.classList.add('hidden');
          console.log('Menu closed');
        }
      });
    });

    // Handle the click event for the lock menu item
    document.querySelectorAll('.popout-menu li.lock').forEach(item => {
      item.addEventListener('click', function(event) {
        const documentId = this.getAttribute('data-document-id');
        event.stopPropagation();
        event.preventDefault();

        fetch(`/documents/${documentId}/lock`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content // Ensure CSRF token is included
          }
        })
        .then(response => {
          if (response.ok) {
            console.log('Document locked successfully');
            item.querySelector('.tick-icon').classList.add('visible')
            this.nextElementSibling.querySelector('.tick-icon').classList.remove('visible');
          } else {
            console.error('Failed to lock the document');
          }
        })
        .catch(error => console.error('Error:', error));
      });
    });

    //Click event for unlock meu item
    document.querySelectorAll('.popout-menu li.unlock').forEach(item => {
      item.addEventListener('click', function(event) {
        const documentId = this.getAttribute('data-document-id');
        event.stopPropagation();
        event.preventDefault();

        fetch(`/documents/${documentId}/lock`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content // Ensure CSRF token is included
          }
        })
        .then(response => {
          if (response.ok) {
            console.log('Document unlocked successfully');
             item.querySelector('.tick-icon').classList.add('visible');
             this.previousElementSibling.querySelector('.tick-icon').classList.remove('visible');
          } else {
            console.error('Failed to unlock the document');
          }
        })
        .catch(error => console.error('Error:', error));
      });
    });
  });
</script>
