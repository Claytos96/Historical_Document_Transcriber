<div class="doc">
  <div class="pic">
    <% if document.file.attached? %>
      <canvas class="preview" id="pdf-canvas-<%= document.id %>"></canvas>
      <img class="preview" id="jpeg-image-<%= document.id %>"/>
    <% end %>
  </div>
  <div class="info">
    <div class="card-head">
      <div class="title">
        <h2><%= document.title %></h2>
      </div>
      <% if controller_name == 'documents' && action_name == 'your_documents' %>
        <div class="popout">
          <button id="gear-button"><i class="bi bi-gear-fill"></i></button>
          <ul class="hidden popout-menu">
            <li>Prohibit other users from transcribing</li>
          </ul>
        </div>
      <% end %>
    </div>
    <p><%= document.description %></p>
  </div>
</div>

<script>
  document.addEventListener("turbo:load", function() {
    const fileUrl = '<%= url_for(document.file) %>';
    const canvas = document.getElementById('pdf-canvas-<%= document.id %>');
    const img = document.getElementById('jpeg-image-<%= document.id %>');
    const fileExtension = fileUrl.split('.').pop().toLowerCase();
    if (fileExtension === 'pdf') {
      const loadingTask = pdfjsLib.getDocument(fileUrl);
      loadingTask.promise.then(pdf => {
        pdf.getPage(1).then(page => {
          const scale = 1.5;
          const viewport = page.getViewport({ scale: scale });
          const context = canvas.getContext('2d');
          canvas.height = viewport.height;
          canvas.width = viewport.width;

          const renderContext = {
            canvasContext: context,
            viewport: viewport
          };
          page.render(renderContext);
        });
      }).catch(error => {
        console.error('Error loading PDF:', error);
      });
    } else {
      img.src = fileUrl;
      img.style.display = 'block'; // Show image
      canvas.style.display = 'none'; // Hide canvas
    }

    // Popout menu toggle
    const gearButton = document.getElementById('gear-button');
    const popoutMenu = document.querySelector('.popout-menu');

    // Only add the event listener once
    if (gearButton && !gearButton.dataset.listenerAdded) {
      gearButton.addEventListener('click', function(event) {
        event.stopPropagation(); // Prevent click from bubbling up
        event.preventDefault();
        console.log('Gear button clicked'); // Debug log
        popoutMenu.classList.toggle('hidden'); // Toggle visibility
        console.log('Menu hidden:', popoutMenu.classList.contains('hidden')); // Debug log
      });
      gearButton.dataset.listenerAdded = true; // Mark listener as added
    }

    // Close menu if clicking outside
    document.addEventListener('click', function() {
      if (popoutMenu) {
        popoutMenu.classList.add('hidden');
        console.log('Menu closed'); // Debug log
      }
    });
  });
</script>
